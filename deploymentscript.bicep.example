param currentTime string = utcNow()
param uamiName string = 'UAMIScripts'
param randomString string = uniqueString(resourceGroup().id)
param storageAccountName string = 'bicepps${randomString}'

resource ManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2022-01-31-preview' existing = {
  name: uamiName
}

resource StorageAccount 'Microsoft.Storage/storageAccounts@2022-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
    allowBlobPublicAccess: true
    allowCrossTenantReplication: true
    allowSharedKeyAccess: true
    defaultToOAuthAuthentication: false
    dnsEndpointType: 'Standard'
    encryption: {
      keySource: 'Microsoft.Storage'
      requireInfrastructureEncryption: false
      services: {
        blob: {
          enabled: true
          keyType: 'Account'
        }
        file: {
          enabled: true
          keyType: 'Account'
        }
      }
    }
    minimumTlsVersion: 'TLS1_2'
    networkAcls: {
      bypass: 'AzureServices'
      defaultAction: 'Allow'
    }
    publicNetworkAccess: 'Enabled'
    supportsHttpsTrafficOnly: true
  }
}

resource Script 'Microsoft.Resources/deploymentScripts@2020-10-01' = {
  name: 'run_script'
  location: location
  kind: 'AzurePowerShell'
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${ManagedIdentity.id}': {}
    }
  }
  properties: {
    azPowerShellVersion: '8.0'
    scriptContent: '''
$AVD_Security_Group_ID = $( Get-AzADGroup | Where-Object { $_.DisplayName -eq $AVD_Security_Group } ).Id
New-AzRoleAssignment `
-ObjectId  $AVD_Security_Group_ID `
-RoleDefinitionName "Desktop Virtualization User" `
-ResourceName $AVD_Application_Group `
-ResourceGroupName $Resource_Group `
-ResourceType 'Microsoft.DesktopVirtualization/applicationGroups'
'''
    cleanupPreference: 'OnSuccess'
    retentionInterval: 'PT4H'
    forceUpdateTag: currentTime
  }
}